#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

struct AdjListNode{
	int dest;
	int weight;
	struct AdjListNode* next;
};

struct AdjList{
	struct AdjListNode* head;
};

struct Graph{
	int v;
	struct AdjList* array;
};

struct AdjListNode* newAdjListNode(int dest, int weight){
	struct AdjListNode* newNode = (struct AdjListNode*)malloc(sizeof(AdjListNode));
	
	newNode -> dest = dest;
	newNode -> weight = weight;
	newNode -> next = NULL;
	
	return newNode;
}

struct Graph* createGraph(int v){
	struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
	
	graph -> v = v;
	graph -> array = (struct AdjList*)malloc(v*sizeof(struct AdjList));
	
	for(int i = 0; i < v ; i++){
		graph -> array[i].head = NULL;
	}
	
	return graph;
}

void addEdge(struct Graph* graph, int src, int dest, int weight){
	struct AdjListNode* newNode = newAdjListNode(dest, weight);
	
	newNode -> next = graph -> array[src].head;
	graph -> array[src].head = newNode;
	
	newNode = newAdjListNode(src, weight);
	newNode -> next = graph -> array[dest].head;
	graph -> array[dest].head = newNode;
	
}

struct minHeapNode{
	int v;
	int dist;
};

struct minHeap{
	int size;
	int capacity;
	int *pos;
	int MinHeapNode** array;
};

struct minHeapNode* newMinHeapNode(int v, int dist){
	struct minHeapNode* minHeapNode = (struct minHeapNode*)malloc(sizeof(minHeapNode));
	minHeapNode -> v = v;
	minHeapNode -> dist = dist;
	
	return minHeapNode
}

struct createMinHeap(int capacity){
	struct minHeap* minHeap = (struct minHeap*)malloc(sizeof(struct minHeap));
	minHeap -> pos = (int*)malloc(capacity*sizeof(int));
	minHeap -> size = 0;
	minHeap -> capacity = capacity;
	minHeap -> array = (struct minHeapNode**)malloc(capacity*sizeof(minHeapNode*));
}

void swapMinHeapNode(struct minHeapNode** a, struct minHeapNode** b){
	struct minHeapNode* temp;
	temp = *a;
	*a = *b;
	*b = temp;
}

void minHeapify(struct minHeap* minHeap, int idx){
	int smallest, left, right;
	smallest = idx;
	left = 2*idx + 1;
	right = 2*idx + 2;
	
	if(left < minHeap -> size && (minHeap -> array[left] ->dest < minHeap -> array[smallest] -> dest ))
		smallest = left;
	if(right < minHeap -> size && (minHeap -> array[right]->dest < minHeap -> array[smallest] ->dest))
		smallest = right;
	
	if(smallest != idx){
		minHeapNode* smallestNode = minHeap -> array[smallest];
		minHeapNode* idxNode = minHeap -> array[idx];
		
		minHeap -> pos[smallestNode -> v] = idx;
		minHeap -> pos[idx -> v] = smallestNode;
		
		swapMinHeapNode(&smallestNode, &idxNode)
			
		minHeapify(minHeap, smallest);
	}	
}

int isEmpty(struct minHeap* minHeap){
	return minHeap -> size == 0;
}

struct minHeapNode* extractMin(struct minHeap* minHeap){
	if(!minHeap) return NULL;
	
	struct minHeapNode* root = minHeap -> array[0];
	
	struct minHeapNode* lastNode = minHeap -> array[minHeap -> size - 1];
	minHeap -> array[0] = lastNode;
	
	minHeap -> pos[root -> v] = minHeap -> size - 1;
	minHeap -> pos[lastNode -> v] = 0;
	
	--minHeap -> size ;
	minHeapify(minheap, 0);
	
	return root;
}

void decreaseKey(struct minHeap* minHeap, int v, int dist){
	int i = minHeap -> pos[v];
	
	minHeap -> array[i] -> dist = dist;
	
	while(i && minHeap -> array[i] -> dist < minHeap -> array[(i-1)/2] -> dist){
		minHeap -> pos[minHeap -> array[i] -> v] = (i-1)/2;
		minHeap -> pos[minHeap -> array[(i-1)/2] -> v] = i;
		
		swapMinHeapNode(&minHeap -> array[i], &minHeap -> array[(i-1)/2]);
		
		i= (i-1)/2;
	}
	
}

bool isInMinHeap(struct minHeap* minHeap, int v){
	if(minHeap -> pos[v] < minHeap -> size){
		return true;
	}
	return false;
}

void printArray(int dist[], int n){
	cout<<"vertex dist. from source";
	for(int i = 0; i < n; i++)
		cout<<i<<":"<<dist[i];
}

void dijkstra(struct Graph* graph, int src){
	int v = graph -> v;
	int dist[v];
	
	struct minHeap *minHeap = createMinHeap(v);
	
	for(int i = 0; i < v; i++){
		dist[v] = INT_MAX;
		minHeap -> array[v] = newMinHeapNode(v,dist[v]);
		minHeap -> pos[v] = v; 
	}
	
	minHeap -> array[src] = newMinHeapNode(src, dist[src]);
	minHeap -> pos[src] = src;
	dist[src] = 0;
	
	decreaseKey(minHeap,src,dist[src]);
	
	while(!isEmpty(minHeap)){
		struct minHeapNode* minHeapNode = extractMin(minHeap);
		int u = minHeapNode -> v;
		
		struct AdjListNode* pCrawl = graph -> array[u].head;
		while(pCrawl){
			int v = pCrawl -> dest;
			if(isInMinHeap(minHeap, v) && dist[u] != INT_MAX && pCrawl -> weight + dist[u] < dist[v]){
				dist[v] = dist[u] + pCrawl -> weight;
				decreaseKey(minHeap, v, dist[v]);
			}
			pCrawl = pCrawl -> next;
		} 
	}
	printArr(dist,v);
}

